name: Build and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux/amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux/arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: darwin/amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin/arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows/amd64
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build binaries
        run: |
          cargo build --release --target ${{ matrix.target }} --bin rustdocs_mcp_server_http
          cargo build --release --target ${{ matrix.target }} --bin rustdocs_mcp_server
          cargo build --release --target ${{ matrix.target }} --bin mcp_http_wrapper
          cargo build --release --target ${{ matrix.target }} --bin populate_db
          cargo build --release --target ${{ matrix.target }} --bin populate_all
          cargo build --release --target ${{ matrix.target }} --bin add_crate
          cargo build --release --target ${{ matrix.target }} --bin backfill_versions
      
      - name: Prepare Docker binary
        if: startsWith(matrix.platform, 'linux/')
        run: |
          mkdir -p binaries/${{ matrix.platform }}
          cp target/${{ matrix.target }}/release/rustdocs_mcp_server_http binaries/${{ matrix.platform }}/http_server
      
      - name: Upload Docker binary
        if: startsWith(matrix.platform, 'linux/')
        uses: actions/upload-artifact@v4
        with:
          name: docker-binary-${{ matrix.target }}
          path: binaries/${{ matrix.platform }}/http_server
      
      - name: Package release binaries
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          mkdir -p rust-docs-mcp-server
          
          # Copy binaries (handle Windows .exe extension)
          for bin in rustdocs_mcp_server mcp_http_wrapper rustdocs_mcp_server_http populate_db populate_all add_crate backfill_versions; do
            if [ -f "$bin" ]; then
              cp "$bin" rust-docs-mcp-server/
            elif [ -f "$bin.exe" ]; then
              cp "$bin.exe" rust-docs-mcp-server/
            fi
          done
          
          # Copy supporting files
          cp ../../../README.md rust-docs-mcp-server/ || true
          cp ../../../proxy-config.json rust-docs-mcp-server/ || true
          cp ../../../run_mcp_server.sh rust-docs-mcp-server/ || true
          
          # Create archive
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../rust-docs-mcp-server-${{ matrix.target }}.zip rust-docs-mcp-server
          else
            tar czf ../../../rust-docs-mcp-server-${{ matrix.target }}.tar.gz rust-docs-mcp-server
          fi
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: |
            rust-docs-mcp-server-*.tar.gz
            rust-docs-mcp-server-*.zip

  build-push-container:
    name: Build and Push Container
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          pattern: docker-binary-*
          path: binaries-temp
      
      - name: Prepare binaries directory
        run: |
          mkdir -p binaries
          # Move binaries to correct structure
          cp -r binaries-temp/docker-binary-x86_64-unknown-linux-gnu/* binaries/linux/amd64/ || true
          cp -r binaries-temp/docker-binary-aarch64-unknown-linux-gnu/* binaries/linux/arm64/ || true
          chmod +x binaries/linux/*/http_server
          ls -la binaries/
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prebuilt
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-*
          path: artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-files/
          ls -la release-files/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true